name: Build

on:
  push:
    branches: [ main ]  # 仅在main分支的推送时触发
  pull_request:
    branches: [ main ]  # 仅在main分支的PR时触发

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的Ubuntu环境

    steps:
      # 1. 检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 检出完整历史记录，确保所有文件可用

      # 2. 验证Gradle Wrapper
      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

      # 3. 缓存Gradle依赖
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. 设置Java环境
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin  # 使用Temurin发行版

      # 5. 赋予gradlew执行权限（仅适用于Linux/macOS）
      - name: Make gradlew executable
        run: chmod +x gradlew

      # 6. 使用Gradle构建项目
      - name: Build with Gradle
        run: |
          ./gradlew build --no-daemon
          ls -l build/libs/  # 列出生成的JAR文件

      # 7. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CapeShow-Mod
          path: build/libs/*.jar